["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Object",["^ "],"~$Error",["^ "]],"~:use-macros",["^ ","~$go","~$cljs.core.async.macros","~$go-loop","^7"],"~:excludes",["~#set",[]],"~:name","~$dat.reactor.dispatcher","~:imports",null,"~:requires",["^ ","~$async","~$cljs.core.async","^@","^@","~$log","~$taoensso.timbre","^B","^B","~$component","~$com.stuartsierra.component","^D","^D","~$protocols","~$dat.spec.protocols","^F","^F"],"~:uses",null,"~:defs",["^ ","~$new-strictly-ordered-dispatcher",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dat/reactor/dispatcher.cljc","~:line",61,"~:column",7,"~:end-line",61,"~:end-column",38,"~:arglists",["~#list",["~$quote",["^R",[["~$options"],[]]]]],"~:doc","Creates a new strictly ordered dispatcher. This is fine for most cases, and ensures that all events are\n  handled in the order they were dispatched (or should...). Can specify `{:dispatch-chan your-chan}` to customize\n  the flow.","~:top-fn",["^ ","~:variadic",false,"~:max-fixed-arity",1,"~:method-params",["^R",[["^T"],[]]],"^Q",["^R",[["^T"],[]]],"~:arglists-meta",["^R",[null,null]]]],"^;","~$dat.reactor.dispatcher/new-strictly-ordered-dispatcher","^W",false,"^L","resources/public/js/out/dat/reactor/dispatcher.cljc","^P",38,"^V",["^ ","^W",false,"^X",1,"^Y",["^R",[["^T"],[]]],"^Q",["^R",[["^T"],[]]],"^Z",["^R",[null,null]]],"^Y",["^R",[["^T"],[]]],"~:protocol-impl",null,"^Z",["^R",[null,null]],"^N",1,"^M",61,"^O",61,"^X",1,"~:fn-var",true,"^Q",["^R",[["^T"],[]]],"^U","Creates a new strictly ordered dispatcher. This is fine for most cases, and ensures that all events are\n  handled in the order they were dispatched (or should...). Can specify `{:dispatch-chan your-chan}` to customize\n  the flow."],"~$ErrorPriorityDispatcher",["^ ","~:num-fields",3,"~:protocols",["^:",["~$cljs.core/IRecord","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$dat.spec.protocols/PDispatcher","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$com.stuartsierra.component/Lifecycle","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^;","~$dat.reactor.dispatcher/ErrorPriorityDispatcher","^L","resources/public/js/out/dat/reactor/dispatcher.cljc","^P",35,"~:type",true,"^N",12,"~:internal-ctor",true,"^M",72,"~:record",true,"^O",72,"~:skip-protocol-flag",["^:",["^15","^16","^17","^18","^19","^1:","^1;","^1<","^1>","^1@","^1A","^1C","^1D"]]],"~$dispatch!",["^ ","^J",null,"^K",["^ ","^L","/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dat/reactor/dispatcher.cljc","^M",120,"^N",7,"^O",120,"^P",16,"^Q",["^R",["^S",["^R",[["~$dispatcher","~$event","~$level"],["^1K","^1L"]]]]],"^U","Dispatches event on the dispatcher component at the given level (:default if unspecified).","^V",["^ ","^W",false,"^X",3,"^Y",["^R",[["^1K","^1L","^1M"],["^1K","^1L"]]],"^Q",["^R",[["^1K","^1L","^1M"],["^1K","^1L"]]],"^Z",["^R",[null,null]]]],"^;","~$dat.reactor.dispatcher/dispatch!","^W",false,"^L","resources/public/js/out/dat/reactor/dispatcher.cljc","^P",16,"^V",["^ ","^W",false,"^X",3,"^Y",["^R",[["^1K","^1L","^1M"],["^1K","^1L"]]],"^Q",["^R",[["^1K","^1L","^1M"],["^1K","^1L"]]],"^Z",["^R",[null,null]]],"^Y",["^R",[["^1K","^1L","^1M"],["^1K","^1L"]]],"^10",null,"^Z",["^R",[null,null]],"^N",1,"^M",120,"^O",120,"^X",3,"^11",true,"^Q",["^R",[["^1K","^1L","^1M"],["^1K","^1L"]]],"^U","Dispatches event on the dispatcher component at the given level (:default if unspecified)."],"~$->StrictlyOrderedDispatcher",["^ ","^J",null,"^K",["^ ","^L","/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dat/reactor/dispatcher.cljc","^M",40,"^N",12,"^O",40,"^P",37,"^1G",true,"~:factory","~:positional","^Q",["^R",["^S",["^R",[["~$dispatch-chan"]]]]]],"^;","~$dat.reactor.dispatcher/->StrictlyOrderedDispatcher","^W",false,"^L","resources/public/js/out/dat/reactor/dispatcher.cljc","^P",37,"^Y",["^R",[["^1R"]]],"^10",null,"^Z",["^R",[null,null]],"^N",1,"^1G",true,"^1P","^1Q","^M",40,"^O",40,"^X",1,"^11",true,"^Q",["^R",["^S",["^R",[["^1R"]]]]]],"~$map->ErrorPriorityDispatcher",["^ ","^J",null,"^K",["^ ","^L","/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dat/reactor/dispatcher.cljc","^M",72,"^N",12,"^O",72,"^P",35,"^1G",true,"^1P","~:map","^Q",["^R",["^S",["^R",[["~$G__49957"]]]]]],"^;","~$dat.reactor.dispatcher/map->ErrorPriorityDispatcher","^W",false,"^L","resources/public/js/out/dat/reactor/dispatcher.cljc","^P",35,"^Y",["^R",[["^1V"]]],"^10",null,"^Z",["^R",[null,null]],"^N",1,"^1G",true,"^1P","^1U","^M",72,"^O",72,"^X",1,"^11",true,"^Q",["^R",["^S",["^R",[["^1V"]]]]]],"~$StrictlyOrderedDispatcher",["^ ","^13",1,"^14",["^:",["^15","^16","^17","^18","^19","^1:","^1;","^1<","^1=","^1>","^1?","^1@","^1A","^1B","^1C","^1D"]],"^;","~$dat.reactor.dispatcher/StrictlyOrderedDispatcher","^L","resources/public/js/out/dat/reactor/dispatcher.cljc","^P",37,"^1F",true,"^N",12,"^1G",true,"^M",40,"^1H",true,"^O",40,"^1I",["^:",["^15","^16","^17","^18","^19","^1:","^1;","^1<","^1>","^1@","^1A","^1C","^1D"]]],"~$event-chan",["^ ","^J",null,"^K",["^ ","^L","/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dat/reactor/dispatcher.cljc","^M",132,"^N",7,"^O",132,"^P",17,"^Q",["^R",["^S",["^R",[["^1K"]]]]]],"^;","~$dat.reactor.dispatcher/event-chan","^W",false,"^L","resources/public/js/out/dat/reactor/dispatcher.cljc","^P",17,"^Y",["^R",[["^1K"]]],"^10",null,"^Z",["^R",[null,null]],"^N",1,"^M",132,"^O",132,"^X",1,"^11",true,"^Q",["^R",["^S",["^R",[["^1K"]]]]]],"~$->ErrorPriorityDispatcher",["^ ","^J",null,"^K",["^ ","^L","/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dat/reactor/dispatcher.cljc","^M",72,"^N",12,"^O",72,"^P",35,"^1G",true,"^1P","^1Q","^Q",["^R",["^S",["^R",[["~$default-chan","~$error-chan","^1Z"]]]]]],"^;","~$dat.reactor.dispatcher/->ErrorPriorityDispatcher","^W",false,"^L","resources/public/js/out/dat/reactor/dispatcher.cljc","^P",35,"^Y",["^R",[["^21","^22","^1Z"]]],"^10",null,"^Z",["^R",[null,null]],"^N",1,"^1G",true,"^1P","^1Q","^M",72,"^O",72,"^X",3,"^11",true,"^Q",["^R",["^S",["^R",[["^21","^22","^1Z"]]]]]],"~$map->StrictlyOrderedDispatcher",["^ ","^J",null,"^K",["^ ","^L","/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dat/reactor/dispatcher.cljc","^M",40,"^N",12,"^O",40,"^P",37,"^1G",true,"^1P","^1U","^Q",["^R",["^S",["^R",[["~$G__49928"]]]]]],"^;","~$dat.reactor.dispatcher/map->StrictlyOrderedDispatcher","^W",false,"^L","resources/public/js/out/dat/reactor/dispatcher.cljc","^P",37,"^Y",["^R",[["^25"]]],"^10",null,"^Z",["^R",[null,null]],"^N",1,"^1G",true,"^1P","^1U","^M",40,"^O",40,"^X",1,"^11",true,"^Q",["^R",["^S",["^R",[["^25"]]]]]],"~$dispatch-error!",["^ ","^J",null,"^K",["^ ","^L","/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dat/reactor/dispatcher.cljc","^M",127,"^N",7,"^O",127,"^P",22,"^Q",["^R",["^S",["^R",[["~$datview","^1L"]]]]]],"^;","~$dat.reactor.dispatcher/dispatch-error!","^W",false,"^L","resources/public/js/out/dat/reactor/dispatcher.cljc","^P",22,"^Y",["^R",[["^28","^1L"]]],"^10",null,"^Z",["^R",[null,null]],"^N",1,"^M",127,"^O",127,"^X",2,"^11",true,"^Q",["^R",["^S",["^R",[["^28","^1L"]]]]]],"~$new-error-priority-dispatcher",["^ ","^J",null,"^K",["^ ","^L","/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dat/reactor/dispatcher.cljc","^M",103,"^N",7,"^O",103,"^P",36,"^Q",["^R",["^S",["^R",[["^T"],[]]]]],"^U","Creates a new ErroPriorityDispatcher. Can customize :default-chan and :error-chan through options.\n  Idea is that Reactor will get error events before other queued events, but the mechanism is a little flawed.\n  Currently, it's still possible for a non error event to get through before the reactor is ready to consume from the event-chan.\n  May need to adjust the protocols.","^V",["^ ","^W",false,"^X",1,"^Y",["^R",[["^T"],[]]],"^Q",["^R",[["^T"],[]]],"^Z",["^R",[null,null]]]],"^;","~$dat.reactor.dispatcher/new-error-priority-dispatcher","^W",false,"^L","resources/public/js/out/dat/reactor/dispatcher.cljc","^P",36,"^V",["^ ","^W",false,"^X",1,"^Y",["^R",[["^T"],[]]],"^Q",["^R",[["^T"],[]]],"^Z",["^R",[null,null]]],"^Y",["^R",[["^T"],[]]],"^10",null,"^Z",["^R",[null,null]],"^N",1,"^M",103,"^O",103,"^X",1,"^11",true,"^Q",["^R",[["^T"],[]]],"^U","Creates a new ErroPriorityDispatcher. Can customize :default-chan and :error-chan through options.\n  Idea is that Reactor will get error events before other queued events, but the mechanism is a little flawed.\n  Currently, it's still possible for a non error event to get through before the reactor is ready to consume from the event-chan.\n  May need to adjust the protocols."]],"~:require-macros",["^ ","~$async-macros","^7","^7","^7","^A","^B","^B","^B"],"~:cljs.analyzer/constants",["^ ","~:seen",["^:",["~:else","~:dispatch-chan","~:event-chan","~:default","~:recur","^1R","~:default-chan","^1Z","~:error-chan","~:info","^21","~:error","^22","~:auto","~:p"]],"~:order",["^2A","^2D","^2@","^2G","~:p","^2I","^1R","^2E","^2F","^2B","^2H","^21","^22","^1Z","^2C"]],"^U",null]
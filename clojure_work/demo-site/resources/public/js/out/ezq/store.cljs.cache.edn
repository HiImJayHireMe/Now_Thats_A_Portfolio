{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name ezq.store, :imports nil, :requires {r cljs.reader, cljs.reader cljs.reader}, :uses nil, :defs {store {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/src/ezq/store.cljs", :line 4, :column 7, :end-line 4, :end-column 12, :arglists (quote ([state])), :doc "Save the given application state in HTML5 localstorage"}, :name ezq.store/store, :variadic false, :file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/src/ezq/store.cljs", :end-column 12, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 4, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state])), :doc "Save the given application state in HTML5 localstorage"}, load {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/src/ezq/store.cljs", :line 9, :column 16, :end-line 9, :end-column 20, :export true, :arglists (quote ([])), :doc "Load the application state from HTML5 localstorage, nil if it doesn't exist"}, :name ezq.store/load, :variadic false, :file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/src/ezq/store.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Load the application state from HTML5 localstorage, nil if it doesn't exist"}, init-persistence {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/src/ezq/store.cljs", :line 15, :column 7, :end-line 15, :end-column 23, :arglists (quote ([app])), :doc "Given an application, watch it for changes and persist via localstorage"}, :name ezq.store/init-persistence, :variadic false, :file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/src/ezq/store.cljs", :end-column 23, :method-params ([app]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([app])), :doc "Given an application, watch it for changes and persist via localstorage"}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:state :persistence}, :order [:state :persistence]}, :doc nil}
{:rename-macros {}, :renames {}, :use-macros {go cljs.core.async.macros}, :excludes #{}, :name ezq.channeler, :imports nil, :requires {a cljs.core.async, cljs.core.async cljs.core.async}, :uses nil, :defs {cell-handler {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/src/ezq/channeler.cljs", :line 7, :column 7, :end-line 7, :end-column 19, :arglists (quote ([winner x y channels]))}, :name ezq.channeler/cell-handler, :variadic false, :file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/src/ezq/channeler.cljs", :end-column 19, :method-params ([winner x y channels]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 4, :fn-var true, :arglists (quote ([winner x y channels]))}, show-state {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/src/ezq/channeler.cljs", :line 11, :column 7, :end-line 11, :end-column 17, :arglists (quote ([]))}, :name ezq.channeler/show-state, :variadic false, :file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/src/ezq/channeler.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, ticker-button {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/src/ezq/channeler.cljs", :line 15, :column 7, :end-line 15, :end-column 20, :arglists (quote ([channels]))}, :name ezq.channeler/ticker-button, :variadic false, :file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/src/ezq/channeler.cljs", :end-column 20, :method-params ([channels]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([channels]))}, blog-post {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/src/ezq/channeler.cljs", :line 19, :column 7, :end-line 19, :end-column 16, :arglists (quote ([channels] [idx field status message channels])), :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([channels] [idx field status message channels]), :arglists ([channels] [idx field status message channels]), :arglists-meta (nil nil)}}, :name ezq.channeler/blog-post, :variadic false, :file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/src/ezq/channeler.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([channels] [idx field status message channels]), :arglists ([channels] [idx field status message channels]), :arglists-meta (nil nil)}, :method-params ([channels] [idx field status message channels]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 5, :fn-var true, :arglists ([channels] [idx field status message channels])}, reset-button {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/src/ezq/channeler.cljs", :line 26, :column 7, :end-line 26, :end-column 19, :arglists (quote ([channels]))}, :name ezq.channeler/reset-button, :variadic false, :file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/src/ezq/channeler.cljs", :end-column 19, :method-params ([channels]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([channels]))}, new-post {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/src/ezq/channeler.cljs", :line 29, :column 7, :end-line 29, :end-column 15, :arglists (quote ([channels]))}, :name ezq.channeler/new-post, :variadic false, :file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/src/ezq/channeler.cljs", :end-column 15, :method-params ([channels]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([channels]))}}, :require-macros {am cljs.core.async.macros, cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:tick :restart :else :new-entry :recur :blog-entries :ticker-switch :board}, :order [:board :recur :else :tick :ticker-switch :new-entry :blog-entries :restart]}, :doc nil}
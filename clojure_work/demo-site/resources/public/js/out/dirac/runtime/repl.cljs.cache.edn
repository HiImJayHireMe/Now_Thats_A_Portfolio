{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name dirac.runtime.repl, :imports nil, :requires {goog.object goog.object, dirac.runtime.deps dirac.runtime.deps, ua goog.labs.userAgent.browser, dirac.runtime.bootstrap dirac.runtime.bootstrap, output dirac.runtime.output, dirac.runtime.output dirac.runtime.output, string clojure.string, goog.labs.userAgent.browser goog.labs.userAgent.browser, gobject goog.object, dirac.runtime.util dirac.runtime.util, clojure.string clojure.string, dirac.runtime.prefs dirac.runtime.prefs}, :uses {get-prefs dirac.runtime.prefs, in-node-context? dirac.runtime.util, pref dirac.runtime.prefs, bootstrap! dirac.runtime.bootstrap}, :defs {get-serialized-config {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 139, :column 16, :end-line 139, :end-column 37, :export true, :arglists (quote ([]))}, :name dirac.runtime.repl/get-serialized-config, :variadic false, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 37, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 139, :end-line 139, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, dirac-msg-args {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 35, :column 7, :end-line 35, :end-column 21, :arglists (quote ([name args]))}, :name dirac.runtime.repl/dirac-msg-args, :variadic false, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 21, :method-params ([name args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 2, :fn-var true, :arglists (quote ([name args]))}, eval-captured {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 198, :column 16, :end-line 198, :end-column 29, :export true, :arglists (quote ([job-id wrap-mode job-fn])), :doc "Evaluates a REPL job in the captured mode. Compare it to eval-special.\n  Captured mode keeps track of *1 *2 *3 and *e REPL specials."}, :name dirac.runtime.repl/eval-captured, :variadic false, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 29, :method-params ([job-id wrap-mode job-fn]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 198, :end-line 198, :max-fixed-arity 3, :fn-var true, :arglists (quote ([job-id wrap-mode job-fn])), :doc "Evaluates a REPL job in the captured mode. Compare it to eval-special.\n  Captured mode keeps track of *1 *2 *3 and *e REPL specials."}, request-eval-js {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 273, :column 16, :end-line 273, :end-column 31, :export true, :arglists (quote ([code])), :doc "Automates Dirac REPL from the app. This way you can request evaluation of Javascript code as it would be entered\n  directly by the user."}, :name dirac.runtime.repl/request-eval-js, :variadic false, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 31, :method-params ([code]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 273, :end-line 273, :max-fixed-arity 1, :fn-var true, :arglists (quote ([code])), :doc "Automates Dirac REPL from the app. This way you can request evaluation of Javascript code as it would be entered\n  directly by the user."}, log {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 44, :column 7, :end-line 44, :end-column 10, :arglists (quote ([request-id kind & args])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(request-id kind args)], :arglists ([request-id kind & args]), :arglists-meta (nil)}}, :name dirac.runtime.repl/log, :variadic true, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(request-id kind args)], :arglists ([request-id kind & args]), :arglists-meta (nil)}, :method-params [(request-id kind args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 2, :fn-var true, :arglists ([request-id kind & args])}, present-java-trace {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 86, :column 7, :end-line 86, :end-column 25, :arglists (quote ([request-id text]))}, :name dirac.runtime.repl/present-java-trace, :variadic false, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 25, :method-params ([request-id text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 2, :fn-var true, :arglists (quote ([request-id text]))}, present-repl-result {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 142, :column 16, :end-line 142, :end-column 35, :export true, :arglists (quote ([request-id value])), :doc "Called by our nREPL boilerplate when we capture a REPL evaluation result."}, :name dirac.runtime.repl/present-repl-result, :variadic false, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 35, :method-params ([request-id value]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 142, :end-line 142, :max-fixed-arity 2, :fn-var true, :arglists (quote ([request-id value])), :doc "Called by our nREPL boilerplate when we capture a REPL evaluation result."}, console-tunnel {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 32, :column 7, :end-line 32, :end-column 21, :arglists (quote ([method & args])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(method args)], :arglists ([method & args]), :arglists-meta (nil)}}, :name dirac.runtime.repl/console-tunnel, :variadic true, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(method args)], :arglists ([method & args]), :arglists-meta (nil)}, :method-params [(method args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists ([method & args])}, emit-error! {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 111, :column 7, :end-line 111, :end-column 18, :arglists (quote ([request-id message]))}, :name dirac.runtime.repl/emit-error!, :variadic false, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 18, :method-params ([request-id message]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 111, :end-line 111, :max-fixed-arity 2, :fn-var true, :arglists (quote ([request-id message]))}, should-silence-warning? {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 97, :column 7, :end-line 97, :end-column 30, :arglists (quote ([message]))}, :name dirac.runtime.repl/should-silence-warning?, :variadic false, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 30, :method-params ([message]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 1, :fn-var true, :arglists (quote ([message]))}, eval {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 238, :column 16, :end-line 238, :end-column 20, :export true, :arglists (quote ([job-id eval-mode wrap-mode job-fn])), :doc "This is the main entrypoint for evaluation of a snippet of code in the context of REPL.\n   Please note that this code runs in the context of the app and uses ClojureScript runtime built together with the app.\n\n    job-id    - a numeric id of the REPL job\n    eval-mode - 'captured' or 'special'\n    wrap-mode - 'short-circuit-presentation' or nil\n    job-fn    - code to be executed in the form of function\n\n  Note that normally we want to support capturing REPL specials *1 *2 *3 and *e. Only when we are executing their retrieval\n  we don't want to capture them and we want to use the 'special' path.\n\n  Also normally we want to wrap our code in a supporting wrapper which will present results directly via cljs-devtools,\n  or present exceptions in a friendly way. Also we want to capture any printing which might occur during evaluation.\n  In some special cases we might not want to do that.\n\n  Finally we want to postprocess evaluation result and prepare Weasel's nREPL response.\n\n  See https://github.com/binaryage/dirac/blob/master/docs/about-repls.md for conceptual overview."}, :name dirac.runtime.repl/eval, :variadic false, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 20, :method-params ([job-id eval-mode wrap-mode job-fn]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 238, :end-line 238, :max-fixed-arity 4, :fn-var true, :arglists (quote ([job-id eval-mode wrap-mode job-fn])), :doc "This is the main entrypoint for evaluation of a snippet of code in the context of REPL.\n   Please note that this code runs in the context of the app and uses ClojureScript runtime built together with the app.\n\n    job-id    - a numeric id of the REPL job\n    eval-mode - 'captured' or 'special'\n    wrap-mode - 'short-circuit-presentation' or nil\n    job-fn    - code to be executed in the form of function\n\n  Note that normally we want to support capturing REPL specials *1 *2 *3 and *e. Only when we are executing their retrieval\n  we don't want to capture them and we want to use the 'special' path.\n\n  Also normally we want to wrap our code in a supporting wrapper which will present results directly via cljs-devtools,\n  or present exceptions in a friendly way. Also we want to capture any printing which might occur during evaluation.\n  In some special cases we might not want to do that.\n\n  Finally we want to postprocess evaluation result and prepare Weasel's nREPL response.\n\n  See https://github.com/binaryage/dirac/blob/master/docs/about-repls.md for conceptual overview."}, bootstrapped? {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 162, :column 16, :end-line 162, :end-column 29, :export true, :arglists (quote ([]))}, :name dirac.runtime.repl/bootstrapped?, :variadic false, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 29, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 162, :end-line 162, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, with-safe-printing {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 121, :column 7, :end-line 121, :end-column 25, :arglists (quote ([f]))}, :name dirac.runtime.repl/with-safe-printing, :variadic false, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 25, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 121, :end-line 121, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f]))}, group {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 59, :column 7, :end-line 59, :end-column 12, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name dirac.runtime.repl/group, :variadic true, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}, *installed?* {:name dirac.runtime.repl/*installed?*, :file "resources/public/js/out/dirac/runtime/repl.cljs", :line 24, :column 1, :end-line 24, :end-column 28, :dynamic true, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 24, :column 16, :end-line 24, :end-column 28, :dynamic true}}, emit-warning! {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 107, :column 7, :end-line 107, :end-column 20, :arglists (quote ([request-id message]))}, :name dirac.runtime.repl/emit-warning!, :variadic false, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 20, :method-params ([request-id message]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 2, :fn-var true, :arglists (quote ([request-id message]))}, call-dirac {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 41, :column 7, :end-line 41, :end-column 17, :arglists (quote ([name & args])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(name args)], :arglists ([name & args]), :arglists-meta (nil)}}, :name dirac.runtime.repl/call-dirac, :variadic true, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(name args)], :arglists ([name & args]), :arglists-meta (nil)}, :method-params [(name args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists ([name & args])}, present {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 174, :column 16, :end-line 174, :end-column 23, :export true, :arglists (quote ([job-id job-fn])), :doc "A presentation wrapper which takes care of presenting REPL evaluation to Dirac user.\n  We short-circuit nREPL feedback mechanism and display REPL results immediatelly to the user as native data.\n  This especially important for cljs-devtools.\n\n  Please note that for traditional nREPL clients we still serialize the result, send it over the wire to nREPL server and\n  in turn that result is sent back to a client and presented. The Dirac client has just special logic and ignores this echoed\n  output because it was already presented directly.\n\n  See https://github.com/binaryage/dirac/blob/master/docs/about-repls.md for conceptual overview."}, :name dirac.runtime.repl/present, :variadic false, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 23, :method-params ([job-id job-fn]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 174, :end-line 174, :max-fixed-arity 2, :fn-var true, :arglists (quote ([job-id job-fn])), :doc "A presentation wrapper which takes care of presenting REPL evaluation to Dirac user.\n  We short-circuit nREPL feedback mechanism and display REPL results immediatelly to the user as native data.\n  This especially important for cljs-devtools.\n\n  Please note that for traditional nREPL clients we still serialize the result, send it over the wire to nREPL server and\n  in turn that result is sent back to a client and presented. The Dirac client has just special logic and ignores this echoed\n  output because it was already presented directly.\n\n  See https://github.com/binaryage/dirac/blob/master/docs/about-repls.md for conceptual overview."}, warn {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 47, :column 7, :end-line 47, :end-column 11, :arglists (quote ([request-id kind & args])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(request-id kind args)], :arglists ([request-id kind & args]), :arglists-meta (nil)}}, :name dirac.runtime.repl/warn, :variadic true, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(request-id kind args)], :arglists ([request-id kind & args]), :arglists-meta (nil)}, :method-params [(request-id kind args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 2, :fn-var true, :arglists ([request-id kind & args])}, install! {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 285, :column 16, :end-line 285, :end-column 24, :export true, :arglists (quote ([]))}, :name dirac.runtime.repl/install!, :variadic false, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 24, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 285, :end-line 285, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, eval-special {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 212, :column 16, :end-line 212, :end-column 28, :export true, :arglists (quote ([job-id wrap-mode job-fn])), :doc "Evaluates a REPL job in the special mode. Compare it to eval-captured."}, :name dirac.runtime.repl/eval-special, :variadic false, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 28, :method-params ([job-id wrap-mode job-fn]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 212, :end-line 212, :max-fixed-arity 3, :fn-var true, :arglists (quote ([job-id wrap-mode job-fn])), :doc "Evaluates a REPL job in the special mode. Compare it to eval-captured."}, postprocess-successful-eval {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 218, :column 16, :end-line 218, :end-column 43, :export true, :arglists (quote ([value])), :doc "This is a postprocessing function wrapping Weasel's Javascript evaluation attempt.\n  This structure is needed for building response to nREPL server (see dirac.implant.weasel in Dirac project)\n  In our case weasel is running in the context of Dirac DevTools and could potentially have different version of cljs runtime.\n  To be correct we have to do this post-processing in app's context to use the same cljs runtime as app evaluating the code.\n\n  Also we have to be careful to not enter into infinite printing with cyclic data structures.\n  We limit printing level and length via with-safe-printing."}, :name dirac.runtime.repl/postprocess-successful-eval, :variadic false, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 43, :method-params ([value]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 218, :end-line 218, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value])), :doc "This is a postprocessing function wrapping Weasel's Javascript evaluation attempt.\n  This structure is needed for building response to nREPL server (see dirac.implant.weasel in Dirac project)\n  In our case weasel is running in the context of Dirac DevTools and could potentially have different version of cljs runtime.\n  To be correct we have to do this post-processing in app's context to use the same cljs runtime as app evaluating the code.\n\n  Also we have to be careful to not enter into infinite printing with cyclic data structures.\n  We limit printing level and length via with-safe-printing."}, present-output {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 153, :column 16, :end-line 153, :end-column 30, :export true, :arglists (quote ([request-id kind format text]))}, :name dirac.runtime.repl/present-output, :variadic false, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 30, :method-params ([request-id kind format text]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 153, :end-line 153, :max-fixed-arity 4, :fn-var true, :arglists (quote ([request-id kind format text]))}, execute-job {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 191, :column 16, :end-line 191, :end-column 27, :export true, :arglists (quote ([job-id wrap-mode job-fn])), :doc "Execute a REPL job by optionally wrapping it in a requested wrapper."}, :name dirac.runtime.repl/execute-job, :variadic false, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 27, :method-params ([job-id wrap-mode job-fn]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 191, :end-line 191, :max-fixed-arity 3, :fn-var true, :arglists (quote ([job-id wrap-mode job-fn])), :doc "Execute a REPL job by optionally wrapping it in a requested wrapper."}, api-version {:name dirac.runtime.repl/api-version, :file "resources/public/js/out/dirac/runtime/repl.cljs", :line 131, :column 1, :end-line 131, :end-column 17, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 131, :column 6, :end-line 131, :end-column 17}}, *bootstrapped?* {:name dirac.runtime.repl/*bootstrapped?*, :file "resources/public/js/out/dirac/runtime/repl.cljs", :line 25, :column 1, :end-line 25, :end-column 31, :dynamic true, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 25, :column 16, :end-line 25, :end-column 31, :dynamic true}}, present-repl-exception {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 148, :column 16, :end-line 148, :end-column 38, :export true, :arglists (quote ([request-id exception])), :doc "Called by our nREPL boilerplate when we capture a REPL evaluation exception."}, :name dirac.runtime.repl/present-repl-exception, :variadic false, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 38, :method-params ([request-id exception]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 148, :end-line 148, :max-fixed-arity 2, :fn-var true, :arglists (quote ([request-id exception])), :doc "Called by our nREPL boilerplate when we capture a REPL evaluation exception."}, get-whitespace-prefix-length {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 73, :column 7, :end-line 73, :end-column 35, :arglists (quote ([line]))}, :name dirac.runtime.repl/get-whitespace-prefix-length, :variadic false, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 35, :method-params ([line]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([line]))}, detect-and-strip {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 67, :column 7, :end-line 67, :end-column 23, :arglists (quote ([prefix text]))}, :name dirac.runtime.repl/detect-and-strip, :variadic false, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 23, :method-params ([prefix text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 2, :fn-var true, :arglists (quote ([prefix text]))}, available? {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 20, :column 17, :end-line 20, :end-column 27, :dynamic true, :arglists (quote ([]))}, :name dirac.runtime.repl/available?, :variadic false, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 27, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :dynamic true, :line 20, :end-line 20, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, should-silence-error? {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 103, :column 7, :end-line 103, :end-column 28, :arglists (quote ([_message]))}, :name dirac.runtime.repl/should-silence-error?, :variadic false, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 28, :method-params ([_message]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 103, :end-line 103, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_message]))}, capture-output {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 165, :column 16, :end-line 165, :end-column 30, :export true, :arglists (quote ([job-id f])), :doc "A printing wrapper responsible for capturing printed output and presenting it via `present-output`."}, :name dirac.runtime.repl/capture-output, :variadic false, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 30, :method-params ([job-id f]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 165, :end-line 165, :max-fixed-arity 2, :fn-var true, :arglists (quote ([job-id f])), :doc "A printing wrapper responsible for capturing printed output and presenting it via `present-output`."}, installed? {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 282, :column 16, :end-line 282, :end-column 26, :export true, :arglists (quote ([]))}, :name dirac.runtime.repl/installed?, :variadic false, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 26, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 282, :end-line 282, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, remove-common-whitespace-prefix {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 78, :column 7, :end-line 78, :end-column 38, :arglists (quote ([text]))}, :name dirac.runtime.repl/remove-common-whitespace-prefix, :variadic false, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 38, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text]))}, postprocess-unsuccessful-eval {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 230, :column 16, :end-line 230, :end-column 45, :export true, :arglists (quote ([ex]))}, :name dirac.runtime.repl/postprocess-unsuccessful-eval, :variadic false, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 45, :method-params ([ex]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 230, :end-line 230, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ex]))}, request-eval-cljs {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 266, :column 16, :end-line 266, :end-column 33, :export true, :arglists (quote ([code])), :doc "Automates Dirac REPL from the app. This way you can request evaluation of ClojureScript code as it would be entered\n  directly by the user."}, :name dirac.runtime.repl/request-eval-cljs, :variadic false, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 33, :method-params ([code]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 266, :end-line 266, :max-fixed-arity 1, :fn-var true, :arglists (quote ([code])), :doc "Automates Dirac REPL from the app. This way you can request evaluation of ClojureScript code as it would be entered\n  directly by the user."}, get-api-version {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 133, :column 16, :end-line 133, :end-column 31, :export true, :arglists (quote ([]))}, :name dirac.runtime.repl/get-api-version, :variadic false, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 31, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 133, :end-line 133, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, group-collapsed {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 56, :column 7, :end-line 56, :end-column 22, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name dirac.runtime.repl/group-collapsed, :variadic true, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}, group-end {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 62, :column 7, :end-line 62, :end-column 16, :arglists (quote ([]))}, :name dirac.runtime.repl/group-end, :variadic false, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, safe-pr-str {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 126, :column 7, :end-line 126, :end-column 18, :arglists (quote ([v]))}, :name dirac.runtime.repl/safe-pr-str, :variadic false, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 18, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 126, :end-line 126, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, uninstall! {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 291, :column 16, :end-line 291, :end-column 26, :export true, :arglists (quote ([]))}, :name dirac.runtime.repl/uninstall!, :variadic false, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 26, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 291, :end-line 291, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, formatted-log {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 115, :column 7, :end-line 115, :end-column 20, :arglists (quote ([request-id kind format text]))}, :name dirac.runtime.repl/formatted-log, :variadic false, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 20, :method-params ([request-id kind format text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 4, :fn-var true, :arglists (quote ([request-id kind format text]))}, dirac-log-args {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 38, :column 7, :end-line 38, :end-column 21, :arglists (quote ([request-id kind args]))}, :name dirac.runtime.repl/dirac-log-args, :variadic false, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 21, :method-params ([request-id kind args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 3, :fn-var true, :arglists (quote ([request-id kind args]))}, get-effective-config {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 136, :column 16, :end-line 136, :end-column 36, :export true, :arglists (quote ([]))}, :name dirac.runtime.repl/get-effective-config, :variadic false, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 36, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 136, :end-line 136, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, error {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 50, :column 7, :end-line 50, :end-column 12, :arglists (quote ([request-id kind & args])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(request-id kind args)], :arglists ([request-id kind & args]), :arglists-meta (nil)}}, :name dirac.runtime.repl/error, :variadic true, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(request-id kind args)], :arglists ([request-id kind & args]), :arglists-meta (nil)}, :method-params [(request-id kind args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 2, :fn-var true, :arglists ([request-id kind & args])}, group* {:protocol-inline nil, :meta {:file "/home/jay/_project/personal/demo/clsj/qdemo/snakeq/resources/public/js/out/dirac/runtime/repl.cljs", :line 53, :column 7, :end-line 53, :end-column 13, :arglists (quote ([collapsed? request-id kind & args])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(collapsed? request-id kind args)], :arglists ([collapsed? request-id kind & args]), :arglists-meta (nil)}}, :name dirac.runtime.repl/group*, :variadic true, :file "resources/public/js/out/dirac/runtime/repl.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(collapsed? request-id kind args)], :arglists ([collapsed? request-id kind & args]), :arglists-meta (nil)}, :method-params [(collapsed? request-id kind args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 3, :fn-var true, :arglists ([collapsed? request-id kind & args])}}, :require-macros {dirac.runtime.prefs dirac.runtime.prefs, dirac.runtime.util dirac.runtime.util}, :cljs.analyzer/constants {:seen #{:java-trace-header-style :else :safe-print-level :silence-no-such-namespace-warnings :rich-text-enabled :safe-print-length :stderr :silence-use-of-undeclared-var-warnings}, :order [:stderr :java-trace-header-style :silence-use-of-undeclared-var-warnings :silence-no-such-namespace-warnings :else :rich-text-enabled :safe-print-level :safe-print-length]}, :doc nil}